using System; using System.Collections.Generic;  namespace Serial {     public class PositionCalculator     {         public XYZ StartPosition = new XYZ();         public XYZ CurrentPosition = new XYZ(); 		public XYZ Speed = new XYZ(); 		public XYZ AccelerationRaw = new XYZ(); 		public XYZ AccelerationCalculated = new XYZ();  		public List<XYZ> AccelerationLog = new List<XYZ>(); 		private const int LogAmount = 200;         public PositionCalculator()         {          }  		public void SetStartPoint(double x = 0, double y = 0, double z = 0)         {             StartPosition.X = x;             StartPosition.Y = y;             StartPosition.Z = z;         }          private void UpdatePosition(XYZ impact)         {             CurrentPosition.X += impact.X;             CurrentPosition.Y += impact.Y;             CurrentPosition.Z += impact.Z;         }          public void CalculatePositionFromAccelerometer(DataPoint dataPoint)         {             XYZ impact = new XYZ(); 			impact.X = dataPoint.Coordinates.X * dataPoint.TimeInSec * dataPoint.TimeInSec; 			impact.Y = dataPoint.Coordinates.Y * dataPoint.TimeInSec * dataPoint.TimeInSec; 			impact.Z = dataPoint.Coordinates.Z * dataPoint.TimeInSec * dataPoint.TimeInSec; 			//CalculateSpeed(dataPoint.Coordinates);             UpdatePosition(impact);         }          public void ResetPossition(XYZ position)         {             CurrentPosition.X = position.X;             CurrentPosition.Y = position.Y;             CurrentPosition.Z = position.Z;         }         /* 		public void CalculateSpeed() { 			int a = 0;             int b = AccelerationLog.Count -1;             for (int i = a; i < b; i++)
			{
				int fB = AccelerationLog[i]; 				int fA = AccelerationLog[i];                 
			}  		} */ 		public void SetAccelleration(XYZ Acc) { 			AccelerationLog.Add(Acc); 			if (AccelerationLog.Count >= LogAmount) { 				//CalculateSpeed(); 			} 		}     } } 